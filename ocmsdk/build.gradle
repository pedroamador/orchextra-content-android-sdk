apply plugin: 'com.android.library'
apply from: 'jacoco.gradle'
apply from: 'sonarqube.gradle'

apply from: 'common_methods.gradle'
apply from: 'dependencies.gradle'
apply plugin: 'me.tatarka.retrolambda'

apply plugin: 'com.github.dcendents.android-maven'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

group = 'com.github.Orchextra'
version ='ocmVersion'


apply from: 'variants.gradle'

def CONCURRENT_INTERACTORS = "CONCURRENT_INTERACTORS"
def RETROFIT_LOG = "RETROFIT_LOG"

def API_URL = "API_URL";
def OCM_SDK_VERSION = "OCM_SDK_VERSION";

def YOUTUBE_DEVELOPER_KEY = "YOUTUBE_DEVELOPER_KEY"

def VIMEO_ACCESS_TOKEN = "VIMEO_ACCESS_TOKEN"
android {
  compileSdkVersion project.androidCompileSdkVersion
  buildToolsVersion project.androidBuildToolsVersion

  defaultConfig {
    minSdkVersion project.androidMinSdkVersion
    targetSdkVersion project.androidTargetSdkVersion
    versionCode 1
    versionName "1.0"
    //asv mandatory for realm(not exits realm.so version for mips64, armeabi
    ndk {
      abiFilters "armeabi-v7a","x86_64","x86","mips","arm64-v8a"
    }
    configurations {
      compile.exclude group: "org.jetbrains", module: "annotations"
    }
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }
  buildTypes {
    staging {
      debuggable true
      //      testCoverageEnabled = true
    }
    debug {
      debuggable true
      //      testCoverageEnabled = true
    }
    release {
      debuggable true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
      signingConfig android.signingConfigs.debug
    }
  }

  project.android.libraryVariants.all { variant ->

    variant.productFlavors.each { flavor ->

      setVariantBuildConfigField(variant, project.apiOcm, API_URL, STRING)
      setVariantBuildConfigField(variant, project.ocmSdkVersion, OCM_SDK_VERSION, STRING)
      setVariantBuildConfigField(variant, project.concurrentInteractors,
          CONCURRENT_INTERACTORS, INT)
      setVariantBuildConfigField(variant, project.retrofitLog, RETROFIT_LOG, BOOLEAN)
      setVariantBuildConfigField(variant, project.youtubeDeveloperKey,
          YOUTUBE_DEVELOPER_KEY, STRING)
      setVariantBuildConfigField(variant, project.vimeoAccessToken,
          VIMEO_ACCESS_TOKEN, STRING)
      println("flavor: " + flavor)
      println("--**********************************************************--")
    }

    /* def bundleTask = tasks["bundle${name.capitalize()}"]
     artifacts {
       archives(bundleTask.archivePath) {
         classifier null
         builtBy bundleTask
       }
     }*/
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8 //this is 4 rx, no problem with ox 1_7
    targetCompatibility JavaVersion.VERSION_1_8
  }

  testOptions {
    unitTests.returnDefaultValues = true
  }


  flavorDimensions "ocm"

  productFlavors {
    ocm {
      dimension "ocm"
    }
  }


  //true to publish all flavour artifacts
  // publishNonDefault true
  defaultPublishConfig "ocmRelease"
  //defaultPublishConfig "ocmDebug"
  //defaultPublishConfig {"ocmRelease","ocmDebug","ocmStaging"}

  // publishNonDefault is deprecated and has no effect anymore. All variants are now published.
  // true to publish all flavour artifacts
  //publishNonDefault true
  //defaultPublishConfig "ocmStaging"
  //  defaultPublishConfig "ocmDebug"
  // default build flavour
  //defaultPublishConfig "ocmDebug"
}

jacocoAndroidUnitTestReport {
  excludes += ['**/BuildConfig*.*']
}

//configurations {
//  ocmReleaseImplementation
//  ocmStagingImplementation
//  ocmDebugImplementation
//}

if( android.productFlavors.size() > 0 ) {
  android.libraryVariants.all { variant ->
    // Publish a main artifact, otherwise the maven pom is not generated
    //if( variant.name == android.defaultPublishConfig ) {
    def bundleTask = tasks["bundle${name.capitalize()}"]
    artifacts {
      println('BUNDLE!'+bundleTask.archivePath)
      println('classifier!'+variant.name)
      println('builtBy!'+bundleTask.name)
      archives(bundleTask.archivePath) {
        classifier variant.name
        builtBy bundleTask

      }
    }
  }
  //}
}
//variant.name

task finalize {
  doFirst {
    tasks.assembleOcmDebug.execute()
    tasks.assembleOcmRelease.execute()
    tasks.assembleOcmStaging.execute()
  }

  println('finally!')
}
finalize.dependsOn(ocmsdk:install)
//install.finalizedBy(finalize)
install.dependsOn(ocmsdk:build)



dependencies {
  //TEST
  testImplementation project.testLibraries.junit
  testImplementation project.testLibraries.mockito

  implementation fileTree(dir: 'libs', include: ['*.jar']) //youtube

  //google Support/CustomTabs/playServices
  api project.libraries.androidSupportDesign
  api project.libraries.androidCustomtabs

  api project.libraries.playServicesBase
  api project.libraries.playServicesLocation
  api project.libraries.playServicesGcm

  //gigigo Lib
  api project.libraries.ggglib
  api project.libraries.gggJavaLib

  //Dagger
  implementation project.libraries.dagger
  annotationProcessor project.libraries.daggerCompiler

  //Image Loader Glide/Blur
  api project.libraries.imageloaderGlideBlur

  //Orchextra
  //   implementation project.libraries.oxvuforiaimplementation
  //  ocmStagingImplementation(project.libraries.orchextrasdkStaging) { transitive = true
  //    exclude module: 'support-v4'  }
  //  ocmDebugImplementation(project.libraries.orchextrasdkDebug) { transitive = true
  //    exclude module: 'support-v4' }
  //  ocmReleaseImplementation(project.libraries.orchextrasdkRelease) { transitive = true
  //    exclude module: 'support-v4' }
  // implementation project.libraries.oxvuforiaimplementation
  /*
   ocmStagingCompile(project.libraries.orchextrasdkStaging) {
     transitive = true
     exclude module: 'support-v4'
   }
   ocmDebugCompile(project.libraries.orchextrasdkDebug) {
     transitive = true
     exclude module: 'support-v4'
   }
   ocmReleaseCompile(project.libraries.orchextrasdkRelease) {
     transitive = true
     exclude module: 'support-v4'
   }
 */
/*asv old compiles ox gradle 2.3.3*/
  stagingApi(project.libraries.orchextrasdkStaging) {
    transitive = true
    exclude module: 'support-v4'
  }
  debugApi(project.libraries.orchextrasdkDebug) {
    transitive = true
    exclude module: 'support-v4'
  }
  releaseApi(project.libraries.orchextrasdkRelease) {
    transitive = true
    exclude module: 'support-v4'
  }
//asv new ox with gradle 3.0.0

  //api('com.github.Orchextra.orchextra-android-sdk:orchextrasdk-control:525Test')

  //customs Views


  api project.libraries.doubleViewPager
  api project.libraries.autofitTextView
  api project.libraries.multipleGridRecyclerView


  api project.libraries.rxAndroid
  api project.libraries.rxJava
  api project.libraries.rxRetrofit
  api project.libraries.arrow

  api project.libraries.kache


  api project.libraries.gpuImage//4 readarticles

  implementation project.libraries.lifecycleExtensions
  implementation project.libraries.viewModel
  implementation project.libraries.liveData
  // ReactiveStreams support for LiveData
  implementation project.libraries.lifecycleReactStreams
  // Java8 support for Lifecycles
  implementation project.libraries.lifecycleSupportForJava8


  implementation project.libraries.roomRuntime
  annotationProcessor project.libraries.roomCompiler

  // RxJava support for Room
  implementation project.libraries.roomRxJava

  api project(':vimeosdk')

  //TEST
  testImplementation project.testLibraries.junit
  testImplementation project.testLibraries.assertj
  testImplementation project.testLibraries.mockito

  // Test helpers for LiveData
  testImplementation project.testLibraries.liveDataTesting

  // Test helpers for Room
  testImplementation project.testLibraries.roomTesting

}